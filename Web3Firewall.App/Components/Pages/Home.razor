@page "/"
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using System.Text.Json.Serialization
@using Web3Firewall.Shared.Database.Tables
@using Web3Firewall.Shared.Enums
@using Web3Firewall.Shared.Models
@inject HttpClient Http


<PageTitle>Home</PageTitle>

<br/>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-8">
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <MudToolBar>
            <MudToggleIconButton Toggled="isReadOnly" ,
                                 ToggledChanged="OnReadOnlyChanged"
                                 Icon="@Icons.Material.Filled.AlarmOff"
                                 Color="@Color.Error"
                                 ToggledIcon="@Icons.Material.Filled.AlarmOn"
                                 ToggledColor="@Color.Success"
                                 title="@(isReadOnly ? "On" : "Off")" />
            <MudSpacer />
            <MudText Typo="Typo.h6">RPC Request Logs</MudText>
        </MudToolBar>
    </MudPaper>

    <MudPaper Class="pa-4" Elevation="2">
        <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="mb-4">
            <MudItem xs="12" sm="6" md="3">
                <MudTextField T="string" Label="Filter by Method" Variant="Variant.Outlined"
                              @bind-Value="methodFilter" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                              OnAdornmentClick="@(() => _table.ReloadServerData())" DebounceInterval="300" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="ChainProtocol?" Label="Filter by Protocol" @bind-Value="protocolFilter"
                           Variant="Variant.Outlined" Clearable="true" OnClearButtonClick="@(() => { protocolFilter = null; _table.ReloadServerData(); })">
                    @foreach (ChainProtocol proto in Enum.GetValues(typeof(ChainProtocol)))
                    {
                        <MudSelectItem Value="@((ChainProtocol?)proto)">@proto.ToString()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
             <MudItem xs="6" sm="3" md="2" Class="d-flex align-center">
                <MudCheckBox T="bool?" @bind-Checked="@blockedFilter" Label="Blocked" Indeterminate="true"/>
            </MudItem>
            <MudItem xs="6" sm="3" md="2" Class="d-flex align-center">
                <MudCheckBox T="bool?" @bind-Checked="@erroredFilter" Label="Errored" Indeterminate="true"/>
            </MudItem>
            <MudItem xs="12" md="2" Class="d-flex align-center justify-end">
                 <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _table.ReloadServerData())">Apply Filters</MudButton>
            </MudItem>
        </MudGrid>

        <MudTable T="RPCRequestLogEntry" ServerData="ServerReload"
                  @ref="_table" Dense="true" Hover="true" Striped="true" Elevation="0">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Timestamp</MudTh>
                <MudTh>Method</MudTh>
                <MudTh>Protocol</MudTh>
                <MudTh>Block #</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Timestamp">@context.Timestamp.ToString("o")</MudTd>
                <MudTd DataLabel="Method">
                    <MudText Typo="Typo.body2"><MudHighlighter Text="@context.Method" HighlightedText="@methodFilter" /></MudText>
                </MudTd>
                <MudTd DataLabel="Protocol">@context.ChainProtocol</MudTd>
                <MudTd DataLabel="Block #">@context.BlockNumber</MudTd>
                <MudTd DataLabel="Status">





                    @if (context.Blocked)
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Warning" Variant="Variant.Outlined">Blocked</MudChip>
                    }
                    @if (context.Errored)
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Error" Variant="Variant.Outlined">Errored</MudChip>
                    }
                    @if (!context.Blocked && !context.Errored)
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Success" Variant="Variant.Outlined">Success</MudChip>
                    }
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Color="Color.Primary"  />
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found.</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>


@code {

    // --- Component State ---
    private MudTable<RPCRequestLogEntry> _table = new MudTable<RPCRequestLogEntry>();
    private bool isReadOnly;

    // --- Filter State ---
    private string methodFilter = "";
    private ChainProtocol? protocolFilter;
    private bool? blockedFilter; // Using nullable bool for three states (true, false, any)
    private bool? erroredFilter;

    // This property watches for filter changes to automatically reload the table.
    private object[] FilterWatchers => new object[] { blockedFilter, erroredFilter, protocolFilter };

    protected override async Task OnParametersSetAsync()
    {
        if (_table != null)
        {
            await _table.ReloadServerData();
        }
    }

    /// <summary>
    /// This is the primary method called by the MudTable to fetch data from the server.
    /// It gathers all sorting, pagination, and filter parameters to make a single API call.
    /// </summary>
    
    private async Task<TableData<RPCRequestLogEntry>> ServerReload(TableState state, CancellationToken token)
    {
        // Construct the request payload


            var apiRequest = new LogQueryRequest(
                state.Page + 1, // Page (API expects 1-based index)
                state.PageSize, // PageSize
                state.SortLabel, // SortBy
                (ushort)state.SortDirection, // SortDirection
                string.IsNullOrWhiteSpace(methodFilter) ? null : methodFilter, // Method
                (ushort?)protocolFilter, // ChainProtocol (nullable ushort)
                blockedFilter, // IsBlocked
                erroredFilter // IsErrored
            );

        try
        {
            // Determine the endpoint based on whether a method filter is active
            string endpoint = string.IsNullOrWhiteSpace(apiRequest.Method) ? "/Logs" : "/Logs/ByMethod";

            var apiResult = new TableData<RPCRequestLogEntry>();


            if (apiResult != null)
            {
                //                return new TableData<RPCRequestLogEntry>() { TotalItems = apiResult.TotalCount, Items = apiResult.Items };

                return new TableData<RPCRequestLogEntry>() { TotalItems = 0, Items = apiResult.Items };
            }
        }
        catch (Exception ex)
        {
            // TODO: Add proper logging and user notification (e.g., via MudSnackbar)
            Console.WriteLine($"Failed to load data: {ex.Message}");
        }

        // Return empty data on failure
        return new TableData<RPCRequestLogEntry>() { TotalItems = 0, Items = new List<RPCRequestLogEntry>() };
    }
    private Task OnReadOnlyChanged(bool args)
    {
        //TODO: send the API request
        throw new NotImplementedException();
    }
}